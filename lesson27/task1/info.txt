localStorage & sessionStorage хранят данные в виде (key, value);(некие хранилища для данных)

-методы:
1. setItem(key, value) - сохранить/установить ключ/значение;
2. getItem(key) - получить данные по ключу;
3. removeItem(key) - удалить какой либо ключ;
4. clear() - очистить все хранилище;
5. key(index) - получить данные по индексу которые они хранятся в браузере.
6. lenght;

Разница:

-                            sessionStorage

1. привязываеться к вкладке браузера. Укаждой вкладки он свой. Это позволяет нам 
сохранять данные при перезагрузке страницы. Но если мы откроем его(сайт) в другой вкладке
sessionStorage будет уже пустой
2. при перезагрузке страницы данные стираются.

-                             localStorage

1. привязан к источнику (адрес и порт) ресурса. Открывая страницу в разных 
вкладках видно будет одни и те же данные.
2. при перезагрузке данные ОСТАЮТЬСЯ! те что были до закрытия.

////////////////////////////////////////


[object Object]
[1, 2].toString()
"1,2"
({ name: 'Tom'}).toString()
"[object Object]"



ЧТО ТАКОЕ ФОРМАТ  JASON ////////////////////////////////////////////

изначально он был придуман для JavaScripta у формата JASON есть отдельный стандарт.
удобно использовать для обмена данными между клиентом и сервером.
используются строго -> " <- двойные кавычки!
undefind - не поддерживается!





// const user = {
//     name: 'Tom',
//     age: 17,
//     isStudent: false,
//     driverLicener: null,
//     hobbies: ['football', 'diving'],
//     education:[{
//         name: 'MIT Precourse',
//         graduateData: '2020-05-04T14:48:46.105Z'
//     }]
// };

// JSON.stringify(user)
// "{"name":"Tom","age":17,"isStudent":false,
// "driverLicener":null,"hobbies":["football","diving"],
// "education":[{"name":"MIT Precourse","graduateData":"2020-05-04T14:48:46.105Z"}]}"

//сереализированный обьект^^^